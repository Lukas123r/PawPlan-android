rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    // User profile document (stores 'name') and user subcollections
    match /users/{uid} {
      // Restrict profile doc fields and allow owner-only access
      allow read: if isOwner(uid);
      allow create, update: if isOwner(uid)
        && request.resource.data.keys().hasOnly(['name'])
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 100;
      allow delete: if isOwner(uid);

      // Pets subcollection
      match /pets/{docId} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid)
          && request.resource.data.keys().hasOnly(['id','name','breed','birthdate','species','imageUrl'])
          && request.resource.data.id is int && request.resource.data.id >= 0
          && request.resource.data.name is string && request.resource.data.name.size() > 0 && request.resource.data.name.size() <= 100
          && request.resource.data.breed is string
          && request.resource.data.birthdate is string
          && request.resource.data.species in ['DOG','CAT','OTHER']
          && (!request.resource.data.keys().hasAny(['imageUrl']) || request.resource.data.imageUrl is string);
        allow delete: if isOwner(uid);
      }

      // Documents subcollection (metadata only; files in Storage)
      match /documents/{docId} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid)
          && request.resource.data.keys().hasOnly(['name','url','mimeType','createdAt'])
          && request.resource.data.name is string && request.resource.data.name.size() > 0
          && request.resource.data.url is string && request.resource.data.url.matches('https?://.*')
          && request.resource.data.mimeType is string
          && request.resource.data.createdAt is int;
        allow delete: if isOwner(uid);
      }

      // Reminders subcollection
      match /reminders/{docId} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid)
          && request.resource.data.keys().hasOnly(['id','title','time'])
          && request.resource.data.id is int && request.resource.data.id >= 0
          && request.resource.data.title is string && request.resource.data.title.size() > 0
          && request.resource.data.time is string;
        allow delete: if isOwner(uid);
      }

      // Catch-all for any future subcollections under the user (owner-only)
      match /{collection=**}/{docId} {
        allow read, write: if isOwner(uid);
      }
    }

    // Deny everything else by default
    match /{document=**} { allow read, write: if false; }
  }
}
